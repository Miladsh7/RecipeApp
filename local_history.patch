Index: app/src/main/java/com/msh/recipapp/ui/detail/VideoDetailFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/msh/recipapp/ui/detail/VideoDetailFragment.kt b/app/src/main/java/com/msh/recipapp/ui/detail/VideoDetailFragment.kt
new file mode 100644
--- /dev/null	(date 1712156293367)
+++ b/app/src/main/java/com/msh/recipapp/ui/detail/VideoDetailFragment.kt	(date 1712156293367)
@@ -0,0 +1,134 @@
+package com.msh.recipapp.ui.detail
+
+import android.content.Intent
+import android.net.Uri
+import android.os.Bundle
+import android.view.View
+import androidx.core.graphics.drawable.DrawableCompat.setTint
+import androidx.core.view.isVisible
+import androidx.fragment.app.viewModels
+import androidx.lifecycle.lifecycleScope
+import androidx.navigation.fragment.findNavController
+import androidx.navigation.fragment.navArgs
+import coil.load
+import com.google.android.exoplayer2.ExoPlayer
+import com.google.android.exoplayer2.MediaItem
+import com.msh.recipapp.R
+import com.msh.recipapp.base.BaseFragment
+import com.msh.recipapp.data.database.entity.VideoBookmarkEntity
+import com.msh.recipapp.databinding.FragmentVideoDetailBinding
+import com.msh.recipapp.models.home.ResponseVideo
+import com.msh.recipapp.utils.NetworkChecker
+import com.msh.recipapp.utils.minToHour
+import com.msh.recipapp.viewmodel.VideoBookMarkViewModel
+import dagger.hilt.android.AndroidEntryPoint
+import kotlinx.coroutines.delay
+import javax.inject.Inject
+
+@AndroidEntryPoint
+class VideoDetailFragment : BaseFragment<FragmentVideoDetailBinding>(
+    R.layout.fragment_video_detail,
+    FragmentVideoDetailBinding::class
+) {
+
+    private val args: VideoDetailFragmentArgs by navArgs()
+    private val videoBookMarkViewModel: VideoBookMarkViewModel by viewModels()
+
+    lateinit var videoData: ResponseVideo.Video
+
+    private var isExistCache = false
+    private var isExistVideoBookMark = false
+
+    @Inject
+    lateinit var networkChecker: NetworkChecker
+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
+        super.onViewCreated(view, savedInstanceState)
+
+        videoData = args.videoData
+
+        lifecycleScope.launchWhenStarted {
+            networkChecker.checkNetworkAvailability().collect { state ->
+                delay(200)
+                if (isExistCache.not()) {
+                    initInternetLayout(state)
+                }
+                if (state) {
+                    initWithData(videoData)
+                    binding.contentLay.isVisible = true
+                }
+            }
+        }
+
+        binding.backImg.setOnClickListener {
+            findNavController().popBackStack()
+        }
+    }
+
+    private fun initWithData(videoData: ResponseVideo.Video) {
+        binding.apply {
+
+            videoBookMarkViewModel.existsVideoBookMark(videoData.youTubeId!!)
+            checkExistsVideoBookMark()
+            favoriteImg.setOnClickListener {
+                if (isExistVideoBookMark) deleteVideoBookMark(videoData) else saveVideoBookMark(videoData)
+            }
+            coverImg.load(videoData.thumbnail)
+            txtTitleVideoDetail.text = videoData.title
+            timeTxt.text = videoData.length?.minToHour()
+
+            val videoId = videoData.youTubeId
+            imgPlayerIcon.setOnClickListener {
+                val intent = Intent().apply {
+                    action = Intent.ACTION_VIEW
+                    data = Uri.parse("https://www.youtube.com/watch?v=$videoId")
+                }
+                startActivity(intent)
+            }
+
+             btnShare.setOnClickListener {
+                 val intent= Intent().apply {
+                     action = Intent.ACTION_SEND
+                     putExtra(Intent.EXTRA_TEXT,"https://www.youtube.com/watch?v=$videoId")
+                     type = ("text/plain")
+                 }
+
+                 startActivity(intent)
+             }
+        }
+    }
+
+    private fun initInternetLayout(isConnected: Boolean) {
+        binding.internetLay.isVisible = isConnected.not()
+    }
+
+    private fun saveVideoBookMark(data: ResponseVideo.Video) {
+        val entity = VideoBookmarkEntity(data.youTubeId!!, data)
+        videoBookMarkViewModel.saveVideoBookMark(entity)
+        binding.favoriteImg.apply {
+            setTint(drawable, resources.getColor(R.color.Primary_50))
+        }
+    }
+
+    private fun deleteVideoBookMark(data: ResponseVideo.Video) {
+        val entity = VideoBookmarkEntity(data.youTubeId!!, data)
+        videoBookMarkViewModel.deleteVideoBookMark(entity)
+        binding.favoriteImg.apply {
+            setTint(drawable, resources.getColor(R.color.mediumGray))
+        }
+    }
+
+    private fun checkExistsVideoBookMark() {
+        videoBookMarkViewModel.existsVideoBookMarkData.observe(viewLifecycleOwner) {
+            isExistVideoBookMark = it
+            if (it) {
+                binding.favoriteImg.apply {
+                    setTint(drawable, resources.getColor(R.color.Primary_50))
+                }
+            } else {
+                binding.favoriteImg.apply {
+                    setTint(drawable,resources.getColor(R.color.mediumGray))
+                }
+            }
+        }
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/msh/recipapp/ui/bookMark/BookMarkFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/msh/recipapp/ui/bookMark/BookMarkFragment.kt b/app/src/main/java/com/msh/recipapp/ui/bookMark/BookMarkFragment.kt
--- a/app/src/main/java/com/msh/recipapp/ui/bookMark/BookMarkFragment.kt	
+++ b/app/src/main/java/com/msh/recipapp/ui/bookMark/BookMarkFragment.kt	(date 1712156586075)
@@ -2,17 +2,100 @@
 
 import android.os.Bundle
 import android.view.View
+import androidx.fragment.app.viewModels
+import androidx.navigation.fragment.findNavController
+import androidx.recyclerview.widget.LinearLayoutManager
 import com.msh.recipapp.R
 import com.msh.recipapp.base.BaseFragment
 import com.msh.recipapp.databinding.FragmentBookMarkBinding
+import com.msh.recipapp.models.home.ResponseVideo
+import com.msh.recipapp.utils.setupRecyclerview
+import com.msh.recipapp.viewmodel.RecipeBookMarkViewModel
+import com.msh.recipapp.viewmodel.VideoBookMarkViewModel
+import dagger.hilt.android.AndroidEntryPoint
+import javax.inject.Inject
 
+@AndroidEntryPoint
 class BookMarkFragment : BaseFragment<FragmentBookMarkBinding>(
     R.layout.fragment_book_mark,
     FragmentBookMarkBinding::class
 ) {
 
+    @Inject
+    lateinit var videoBookMarkAdapter: VideoBookMarkAdapter
+
+    @Inject
+    lateinit var recipeBookMarkAdapter: RecipeBookMarkAdapter
+
+    private val videoBookMarkViewModel: VideoBookMarkViewModel by viewModels()
+    private val recipeBookMarkViewModel: RecipeBookMarkViewModel by viewModels()
+
     override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
         super.onViewCreated(view, savedInstanceState)
+
+        binding.apply {
+
+            videoBookMarkViewModel.readVideoBookMarkData.observe(viewLifecycleOwner) {
+                if (it.isNotEmpty()) {
+                    videoBookMarkAdapter.setData(it)
+                    rvSavedRecipe.setupRecyclerview(
+                        LinearLayoutManager(requireContext()),
+                        videoBookMarkAdapter
+                    )
+                }
+            }
+
+
+            txtBookmarkVideo.isSelected = true
+            txtBookmarkRecipe.isSelected = false
+
+            txtBookmarkVideo.setOnClickListener {
+                txtBookmarkVideo.isSelected = true
+                txtBookmarkRecipe.isSelected = false
+
+                videoBookMarkViewModel.readVideoBookMarkData.observe(viewLifecycleOwner) {
+                    if (it.isNotEmpty()) {
+                        videoBookMarkAdapter.setData(it)
+                        rvSavedRecipe.setupRecyclerview(
+                            LinearLayoutManager(requireContext()),
+                            videoBookMarkAdapter
+                        )
+                    }
+                }
+
+                videoBookMarkAdapter.setOnItemClickListener {
+                    goDetailPage(it)
+                }
+            }
+
+            txtBookmarkRecipe.setOnClickListener {
+                txtBookmarkVideo.isSelected = false
+                txtBookmarkRecipe.isSelected = true
+
+                recipeBookMarkViewModel.readRecipeBookMarkData.observe(viewLifecycleOwner) {
+                    if (it.isNotEmpty()) {
+                        recipeBookMarkAdapter.setData(it)
+                        rvSavedRecipe.setupRecyclerview(
+                            LinearLayoutManager(requireContext()),
+                            recipeBookMarkAdapter
+                        )
+                    }
+                }
+
+                recipeBookMarkAdapter.setOnItemClickListener {
+                    goDetailPage(it)
+                }
+            }
+        }
+    }
+
+    private fun goDetailPage(id: Int) {
+        val action = BookMarkFragmentDirections.actionBookMarkFragmentToPopularDetailFragment2(id)
+        findNavController().navigate(action)
     }
 
+    private fun goDetailPage(data: ResponseVideo.Video) {
+        val action = BookMarkFragmentDirections.actionBookMarkFragmentToVideoDetailFragment(data)
+        findNavController().navigate(action)
+    }
 }
\ No newline at end of file
Index: app/src/main/java/com/msh/recipapp/ui/bookMark/RecipeBookMarkAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/msh/recipapp/ui/bookMark/RecipeBookMarkAdapter.kt b/app/src/main/java/com/msh/recipapp/ui/bookMark/RecipeBookMarkAdapter.kt
new file mode 100644
--- /dev/null	(date 1712152541715)
+++ b/app/src/main/java/com/msh/recipapp/ui/bookMark/RecipeBookMarkAdapter.kt	(date 1712152541715)
@@ -0,0 +1,58 @@
+package com.msh.recipapp.ui.bookMark
+
+import android.view.LayoutInflater
+import android.view.ViewGroup
+import androidx.recyclerview.widget.DiffUtil
+import androidx.recyclerview.widget.RecyclerView
+import coil.load
+import com.msh.recipapp.base.BaseDiffUtils
+import com.msh.recipapp.data.database.entity.home.RecipeBookMarkEntity
+import com.msh.recipapp.databinding.ItemRecipeBookmarkBinding
+import javax.inject.Inject
+
+class RecipeBookMarkAdapter @Inject constructor() :
+    RecyclerView.Adapter<RecipeBookMarkAdapter.RecipeVh>() {
+
+    private lateinit var binding: ItemRecipeBookmarkBinding
+    private var items = emptyList<RecipeBookMarkEntity>()
+    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecipeVh {
+        binding =
+            ItemRecipeBookmarkBinding.inflate(LayoutInflater.from(parent.context), parent, false)
+        return RecipeVh()
+    }
+
+    override fun getItemCount() = items.size
+
+    override fun onBindViewHolder(holder: RecipeVh, position: Int) {
+        holder.onBind(items[position])
+    }
+
+    inner class RecipeVh : RecyclerView.ViewHolder(binding.root) {
+        fun onBind(item: RecipeBookMarkEntity) {
+            binding.apply {
+                txtTitleRecipe.text = item.result.title
+                txtStarRating.text = item.result.aggregateLikes.toString()
+
+                imgVideo.load(item.result.image)
+
+                root.setOnClickListener {
+                    onItemClickListener?.let {
+                        it(item.id)
+                    }
+                }
+            }
+        }
+    }
+
+    private var onItemClickListener: ((Int) -> Unit)? = null
+    fun setOnItemClickListener(listener: ((Int) -> Unit)) {
+        onItemClickListener = listener
+    }
+
+    fun setData(data: List<RecipeBookMarkEntity>) {
+        val adapterDiffUtils = BaseDiffUtils(items, data)
+        val diffUtils = DiffUtil.calculateDiff(adapterDiffUtils)
+        items = data
+        diffUtils.dispatchUpdatesTo(this)
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/msh/recipapp/ui/onBoarding/OnBoardingFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/msh/recipapp/ui/onBoarding/OnBoardingFragment.kt b/app/src/main/java/com/msh/recipapp/ui/onBoarding/OnBoardingFragment.kt
--- a/app/src/main/java/com/msh/recipapp/ui/onBoarding/OnBoardingFragment.kt	
+++ b/app/src/main/java/com/msh/recipapp/ui/onBoarding/OnBoardingFragment.kt	(date 1712152812321)
@@ -1,0 +1,27 @@
+package com.msh.recipapp.ui.onBoarding
+
+import android.os.Bundle
+import android.view.View
+import androidx.navigation.fragment.findNavController
+import com.msh.recipapp.R
+import com.msh.recipapp.base.BaseFragment
+import com.msh.recipapp.databinding.FragmentOnBoardingBinding
+import dagger.hilt.android.AndroidEntryPoint
+
+@AndroidEntryPoint
+class OnBoardingFragment : BaseFragment<FragmentOnBoardingBinding>(
+    R.layout.fragment_on_boarding,
+    FragmentOnBoardingBinding::class
+) {
+
+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
+        super.onViewCreated(view, savedInstanceState)
+
+        binding.apply {
+            btnStart.setOnClickListener {
+                findNavController().navigate(R.id.action_onBoardingFragment_to_homeFragment)
+            }
+        }
+    }
+
+}
\ No newline at end of file
Index: app/src/main/java/com/msh/recipapp/base/BaseDiffUtils.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/msh/recipapp/base/BaseDiffUtils.kt b/app/src/main/java/com/msh/recipapp/base/BaseDiffUtils.kt
--- a/app/src/main/java/com/msh/recipapp/base/BaseDiffUtils.kt	
+++ b/app/src/main/java/com/msh/recipapp/base/BaseDiffUtils.kt	(date 1712156609214)
@@ -1,0 +1,22 @@
+package com.msh.recipapp.base
+
+import androidx.recyclerview.widget.DiffUtil
+
+class BaseDiffUtils<T>(private val oldItems: List<T>, private val newItems: List<T>) :
+    DiffUtil.Callback() {
+    override fun getOldListSize(): Int {
+        return oldItems.size
+    }
+
+    override fun getNewListSize(): Int {
+        return newItems.size
+    }
+
+    override fun areItemsTheSame(oldItemPosition: Int, newItemPosition: Int): Boolean {
+        return oldItems[oldItemPosition] === newItems[newItemPosition]
+    }
+
+    override fun areContentsTheSame(oldItemPosition: Int, newItemPosition: Int): Boolean {
+        return oldItems[oldItemPosition] === newItems[newItemPosition]
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/msh/recipapp/ui/webview/WebViewFragment.kt b/app/src/main/java/com/msh/recipapp/ui/webview/WebViewFragment.kt
new file mode 100644
diff --git a/app/src/main/java/com/msh/recipapp/ui/bookMark/VideoBookMarkAdapter.kt b/app/src/main/java/com/msh/recipapp/ui/bookMark/VideoBookMarkAdapter.kt
new file mode 100644
diff --git a/app/src/main/java/com/msh/recipapp/viewmodel/VideoBookMarkViewModel.kt b/app/src/main/java/com/msh/recipapp/viewmodel/VideoBookMarkViewModel.kt
new file mode 100644
diff --git a/app/src/main/java/com/msh/recipapp/viewmodel/RecipeBookMarkViewModel.kt b/app/src/main/java/com/msh/recipapp/viewmodel/RecipeBookMarkViewModel.kt
new file mode 100644
